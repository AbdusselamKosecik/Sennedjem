//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://asistan.iletisimmerkezi.mobi/", ConfigurationName="ServiceReference1.AsistanOWSSoap")]
    public interface AsistanOWSSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="https://asistan.iletisimmerkezi.mobi/SendSms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> SendSmsAsync(string UserName, string Password, string UserCode, string ApiKey, string AccountID, string SendDate, string ValidityPeriod, string Originator, string Title, string TemplateText, string GsmNumbers, string ParametersForGsmNumbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://asistan.iletisimmerkezi.mobi/SendUnicodeSms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> SendUnicodeSmsAsync(string UserName, string Password, string UserCode, string ApiKey, string AccountID, string SendDate, string ValidityPeriod, string IsUtf8Allowed, string Originator, string Title, string TemplateText, string GsmNumbers, string ParametersForGsmNumbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://asistan.iletisimmerkezi.mobi/SendTCKSms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> SendTCKSmsAsync(string UserName, string Password, string UserCode, string ApiKey, string AccountID, string SendDate, string ValidityPeriod, string Originator, string Title, string TemplateText, string TckNumbers, string ParametersForTckNumbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://asistan.iletisimmerkezi.mobi/SendUnicodeTCKSms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> SendUnicodeTCKSmsAsync(string UserName, string Password, string UserCode, string ApiKey, string AccountID, string SendDate, string ValidityPeriod, string IsUtf8Allowed, string Originator, string Title, string TemplateText, string TckNumbers, string ParametersForTckNumbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://asistan.iletisimmerkezi.mobi/AddNewPerson", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> AddNewPersonAsync(
                    string UserName, 
                    string Password, 
                    string UserCode, 
                    string GroupID, 
                    string Name, 
                    string Surname, 
                    string Gsm1, 
                    string Gsm2, 
                    string Gsm3, 
                    string Address, 
                    string HomeLine, 
                    string BusinessLine, 
                    string Fax, 
                    string Email, 
                    string Gender, 
                    string Birthday, 
                    string MarriageDate, 
                    string CompanyName, 
                    string PositionInCompany, 
                    string IsBlacklist);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://asistan.iletisimmerkezi.mobi/TuzlaWifi", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TuzlaWifiAsync(string Username, string Password, string Title, string Gsm, string TemplateText);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://asistan.iletisimmerkezi.mobi/ArnavutkoySendSms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> ArnavutkoySendSmsAsync(string UserName, string Password, string UserCode, string ApiKey, string AccountID, string SendDate, string ValidityPeriod, string Originator, string Title, string TemplateText, string GsmNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://asistan.iletisimmerkezi.mobi/CekmekoyHotSpot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CekmekoyHotSpotAsync(string Username, string Password, string Title, string Gsm, string TemplateText);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://asistan.iletisimmerkezi.mobi/PetkimHotspot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PetkimHotspotAsync(string Username, string Password, string Title, string Gsm, string TemplateText);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://asistan.iletisimmerkezi.mobi/SendSmsForHotspot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> SendSmsForHotspotAsync(string UserName, string Password, string UserCode, string ApiKey, string AccountID, string ValidityPeriod, string Originator, string Title, string TemplateText, string GsmNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://asistan.iletisimmerkezi.mobi/GetInteractiveSMS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetInteractiveSMSAsync(string UserName, string Password, string UserCode, string AccountID, string MSISDN, string BaslangicTarihi, string BitisTarihi, string OkunduMu);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://asistan.iletisimmerkezi.mobi/BurulasSendSms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> BurulasSendSmsAsync(string UserName, string Password, string UserCode, string ApiKey, string AccountID, string SendDate, string ValidityPeriod, string IsUtf8Allowed, string IsCheckBlackList, string Originator, string Title, string TemplateText, string GsmNumbers, string ParametersForGsmNumbers);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface AsistanOWSSoapChannel : ServiceReference1.AsistanOWSSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class AsistanOWSSoapClient : System.ServiceModel.ClientBase<ServiceReference1.AsistanOWSSoap>, ServiceReference1.AsistanOWSSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AsistanOWSSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(AsistanOWSSoapClient.GetBindingForEndpoint(endpointConfiguration), AsistanOWSSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AsistanOWSSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AsistanOWSSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AsistanOWSSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AsistanOWSSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AsistanOWSSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> SendSmsAsync(string UserName, string Password, string UserCode, string ApiKey, string AccountID, string SendDate, string ValidityPeriod, string Originator, string Title, string TemplateText, string GsmNumbers, string ParametersForGsmNumbers)
        {
            return base.Channel.SendSmsAsync(UserName, Password, UserCode, ApiKey, AccountID, SendDate, ValidityPeriod, Originator, Title, TemplateText, GsmNumbers, ParametersForGsmNumbers);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> SendUnicodeSmsAsync(string UserName, string Password, string UserCode, string ApiKey, string AccountID, string SendDate, string ValidityPeriod, string IsUtf8Allowed, string Originator, string Title, string TemplateText, string GsmNumbers, string ParametersForGsmNumbers)
        {
            return base.Channel.SendUnicodeSmsAsync(UserName, Password, UserCode, ApiKey, AccountID, SendDate, ValidityPeriod, IsUtf8Allowed, Originator, Title, TemplateText, GsmNumbers, ParametersForGsmNumbers);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> SendTCKSmsAsync(string UserName, string Password, string UserCode, string ApiKey, string AccountID, string SendDate, string ValidityPeriod, string Originator, string Title, string TemplateText, string TckNumbers, string ParametersForTckNumbers)
        {
            return base.Channel.SendTCKSmsAsync(UserName, Password, UserCode, ApiKey, AccountID, SendDate, ValidityPeriod, Originator, Title, TemplateText, TckNumbers, ParametersForTckNumbers);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> SendUnicodeTCKSmsAsync(string UserName, string Password, string UserCode, string ApiKey, string AccountID, string SendDate, string ValidityPeriod, string IsUtf8Allowed, string Originator, string Title, string TemplateText, string TckNumbers, string ParametersForTckNumbers)
        {
            return base.Channel.SendUnicodeTCKSmsAsync(UserName, Password, UserCode, ApiKey, AccountID, SendDate, ValidityPeriod, IsUtf8Allowed, Originator, Title, TemplateText, TckNumbers, ParametersForTckNumbers);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> AddNewPersonAsync(
                    string UserName, 
                    string Password, 
                    string UserCode, 
                    string GroupID, 
                    string Name, 
                    string Surname, 
                    string Gsm1, 
                    string Gsm2, 
                    string Gsm3, 
                    string Address, 
                    string HomeLine, 
                    string BusinessLine, 
                    string Fax, 
                    string Email, 
                    string Gender, 
                    string Birthday, 
                    string MarriageDate, 
                    string CompanyName, 
                    string PositionInCompany, 
                    string IsBlacklist)
        {
            return base.Channel.AddNewPersonAsync(UserName, Password, UserCode, GroupID, Name, Surname, Gsm1, Gsm2, Gsm3, Address, HomeLine, BusinessLine, Fax, Email, Gender, Birthday, MarriageDate, CompanyName, PositionInCompany, IsBlacklist);
        }
        
        public System.Threading.Tasks.Task<string> TuzlaWifiAsync(string Username, string Password, string Title, string Gsm, string TemplateText)
        {
            return base.Channel.TuzlaWifiAsync(Username, Password, Title, Gsm, TemplateText);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> ArnavutkoySendSmsAsync(string UserName, string Password, string UserCode, string ApiKey, string AccountID, string SendDate, string ValidityPeriod, string Originator, string Title, string TemplateText, string GsmNumber)
        {
            return base.Channel.ArnavutkoySendSmsAsync(UserName, Password, UserCode, ApiKey, AccountID, SendDate, ValidityPeriod, Originator, Title, TemplateText, GsmNumber);
        }
        
        public System.Threading.Tasks.Task<string> CekmekoyHotSpotAsync(string Username, string Password, string Title, string Gsm, string TemplateText)
        {
            return base.Channel.CekmekoyHotSpotAsync(Username, Password, Title, Gsm, TemplateText);
        }
        
        public System.Threading.Tasks.Task<string> PetkimHotspotAsync(string Username, string Password, string Title, string Gsm, string TemplateText)
        {
            return base.Channel.PetkimHotspotAsync(Username, Password, Title, Gsm, TemplateText);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> SendSmsForHotspotAsync(string UserName, string Password, string UserCode, string ApiKey, string AccountID, string ValidityPeriod, string Originator, string Title, string TemplateText, string GsmNumber)
        {
            return base.Channel.SendSmsForHotspotAsync(UserName, Password, UserCode, ApiKey, AccountID, ValidityPeriod, Originator, Title, TemplateText, GsmNumber);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetInteractiveSMSAsync(string UserName, string Password, string UserCode, string AccountID, string MSISDN, string BaslangicTarihi, string BitisTarihi, string OkunduMu)
        {
            return base.Channel.GetInteractiveSMSAsync(UserName, Password, UserCode, AccountID, MSISDN, BaslangicTarihi, BitisTarihi, OkunduMu);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> BurulasSendSmsAsync(string UserName, string Password, string UserCode, string ApiKey, string AccountID, string SendDate, string ValidityPeriod, string IsUtf8Allowed, string IsCheckBlackList, string Originator, string Title, string TemplateText, string GsmNumbers, string ParametersForGsmNumbers)
        {
            return base.Channel.BurulasSendSmsAsync(UserName, Password, UserCode, ApiKey, AccountID, SendDate, ValidityPeriod, IsUtf8Allowed, IsCheckBlackList, Originator, Title, TemplateText, GsmNumbers, ParametersForGsmNumbers);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.AsistanOWSSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.AsistanOWSSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.AsistanOWSSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://web.asistiletisim.com.tr/OtherFunctions/AsistanOWS.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.AsistanOWSSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://web.asistiletisim.com.tr/OtherFunctions/AsistanOWS.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            AsistanOWSSoap,
            
            AsistanOWSSoap12,
        }
    }
}
